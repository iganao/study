PHP  
・一括コンパイル（プログラムの中身をコンピュータが分かる言葉に翻訳すること）せず、実行時に一行ずつコンパイルするため、コーディングしてすぐ動作の確認が可能。  
・インタプリタ言語（人間が書いたプログラム（ソースコード）をコンピュータが実行する際に１行ずつコンピュータが読み取りやすいように機械語に翻訳していきながら、そのプログラムを実行していく方式を持つプログラミング言語）  
・PHPは、HTML内に直接書き込むことができる。  
例  
<html><div> <?php print("Hello World");?> </div></html>  
「print」は、引数を出力する関数  
末尾の;はプログラムの行の終わりを意味する。  


PHPで条件分岐（if）  
<?php
    $num = 1;
    if ($num === 1) {
        print("これは1です");
    } else if ($num === 2) {
        print("これは2です");
    } else {
        print("これは1でも2でもありません");
    }
?>

「===」と「!==」の等号や不等号は、値と「データ型」まで含めた完全一致か不完全一致かを判定します。
データ型とは、データの種類のことですが、簡単に言えば、文字、数値（整数）、数値（実数＝小数点を含む値）、論理（TrueかFalseか、YesかNoか、真か偽か）といったデータの性格です。たとえば数値としての「123」は整数として扱いますし、画面に表示されるような文字「abc」は文字として扱います。ですので、文字としての「123」は文字として扱うという具合です。
他の固めのプログラム言語では比較的常識でもあるこの概念ですが、PHP では非常に弱いデータ型を持っているという特徴があり、データ型の情報はそれぞれ持っているものの、特定のデータ型専用の変数を作ることができず、汎用的にどのデータ型のデータでも変数に代入することができてしまう仕様となっています。
この仕様を補うためでもあるのでしょう、等号や不等号についても他言語と同様の「==」や「!=」はデータ型は無視し、内容が一致しているかまたは不一致であるかを返すという仕様になっています。
他の言語では当然のことができないのですが、緩いながらも存在するデータ型も含めて完全に一致しているかまたは不一致であるかを判定する比較演算子が「===」と「!==」になっているわけです。
速度だけであれば「===」と「!==」が早い結果となります。