◯PHP  
・一括コンパイル（プログラムの中身をコンピュータが分かる言葉に翻訳すること）せず、実行時に一行ずつコンパイルするため、コーディングしてすぐ動作の確認が可能。  
・インタプリタ言語（人間が書いたプログラム（ソースコード）をコンピュータが実行する際に１行ずつコンピュータが読み取りやすいように機械語に翻訳していきながら、そのプログラムを実行していく方式を持つプログラミング言語）  
・PHPは、HTML内に直接書き込むことができる。  
例  
<html><div> <?php print("Hello World");?> </div></html>  
「print」は、引数を出力する関数  
末尾の;はプログラムの行の終わりを意味する。  


◯PHPで条件分岐（if）  
<?php
    $num = 1;
    if ($num === 1) {
        print("これは1です");
    } else if ($num === 2) {
        print("これは2です");
    } else {
        print("これは1でも2でもありません");
    }
?>

「===」と「!==」の等号や不等号は、値と「データ型」まで含めた完全一致か不完全一致かを判定します。
データ型とは、データの種類のことですが、簡単に言えば、文字、数値（整数）、数値（実数＝小数点を含む値）、論理（TrueかFalseか、YesかNoか、真か偽か）といったデータの性格です。たとえば数値としての「123」は整数として扱いますし、画面に表示されるような文字「abc」は文字として扱います。ですので、文字としての「123」は文字として扱うという具合です。
他の固めのプログラム言語では比較的常識でもあるこの概念ですが、PHP では非常に弱いデータ型を持っているという特徴があり、データ型の情報はそれぞれ持っているものの、特定のデータ型専用の変数を作ることができず、汎用的にどのデータ型のデータでも変数に代入することができてしまう仕様となっています。
この仕様を補うためでもあるのでしょう、等号や不等号についても他言語と同様の「==」や「!=」はデータ型は無視し、内容が一致しているかまたは不一致であるかを返すという仕様になっています。
他の言語では当然のことができないのですが、緩いながらも存在するデータ型も含めて完全に一致しているかまたは不一致であるかを判定する比較演算子が「===」と「!==」になっているわけです。
速度だけであれば「===」と「!==」が早い結果となります。


◯文字列・数値
printf(), sprintf()
文字列をフォーマットに当てはめて出力する。
printf() は出力を行い、sprintf() は結果を文字列として返す。
preg_match(), preg_match_all()
正規表現による一致・検索。preg_match_all() はパターンにマッチしたすべての値を変数に格納する。
preg_replace()
正規表現による置換。パターンにマッチした文字列を指定した文字列に置換する。
preg_quote()
正規表現構文の特殊文字の前にバックスラッシュをつけてエスケープする。
str_replace(), strtr()
文字列の置換。strtr() は複数の文字列のペアを渡して同時に置換できる。
substr(), mb_substr()
文字列の何文字目から何文字取り出すかを指定して文字列の一部分を返す。

strtolower(), strtoupper()
strtolower() はすべてのアルファベットを小文字に変換し、
strtoupper() はすべてのアルファベットを大文字に変換する。

strlen(), mb_strlen()
strlen() は文字列のバイト数を返す。
mb_strlen はマルチバイト文字の文字数を返す。

strpos(), mb_strpos()
文字列の中から指定された文字列が何文字目に存在するかを返す。
大文字小文字を区別しない場合、stripos()、mb_stripos() が用意されている。

mb_convert_encoding()
文字列を指定された文字コードに変換して返す。

mb_convert_kana()
ひらがな・カタカナ、全角・半角を相互に変換する。

trim(), ltrim(), rtrim()
文字列の前後からスペースやタブなどの空白文字や指定された文字を取り除く。
trim() は前後から取り除き、ltrim() は左から、rtrim() は右からのみ取り除く。

mt_rand()
指定された範囲でランダムな数値を返す。
rand() より精度が高い。

is_string()
与えられた値が文字列であるかを返す。

is_int()
与えられた値が整数型であるかを返す。

is_float()
与えられた値が float型(少数) であるかを返す。
is_double() も存在するが内容は is_float() の別名。

is_numeric()
与えられた値が数字として扱えるかを返す。文字列でも良い。

round(), floor(), ceil()
round() は小数部分を四捨五入して返す。
floor() は小数点以下切り捨て、ceil() は小数点以下切り上げで丸める。
桁数を指定することで小数点以下何桁から丸めるかを変更できる。


◯配列
array_slice()
配列の何番目からいくつ取り出すかを指定して取得する。

array_merge(), array_merge_recursive()
配列同士を結合する。array_merge_recursive() は再帰的に結合するため多次元配列でも使える。

in_array()
配列の中に指定された値が含まれているかを返す。

shuffle()
配列をランダムにシャッフルする。

sort(), rsort()
配列を昇順、降順でソート（並び替え）する。キーは新しく割り振られるため、もともとのキーは削除される。

asort(), arsort()
連想配列を昇順、降順でソート（並び替え）する。もともとのキーは保持される。

ksort(), krsort()
配列のキーをもとに昇順、降順でソートする。

usort(), uasort(), uksort()
ユーザーが定義した関数に基づいて配列をソートする。

array_multisort()
複数の配列を他の配列の値をもとにソートする。

array_unique()
配列から重複した値を削除して返す。

array_reverse()
配列の要素を逆順にして返す。

array_shift(), array_pop()
array_shift() は配列の先頭から要素を取り出し、
array_pop() は配列の末尾から要素を取り出す。
元の配列は取り出された分短くなる。

array_walk(), array_walk_recursive()
ユーザー定義関数を配列中のすべての値に適用する。
arra_walk_recursive() は多次元配列に対して再帰的に処理する。
